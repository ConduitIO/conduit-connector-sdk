// Copyright © 2022 Meroxa, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"

	sdk "github.com/conduitio/conduit-connector-sdk"
	"github.com/conduitio/conduit-connector-sdk/cmd/paramgen"
)

type Args struct {
	output     string
	structName string
	path       string
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("paramgen: ")

	// parse the command arguments
	args := parseArgs()

	// parse the sdk parameters
	params, err := paramgen.ParseParameters(args.path, args.structName)
	if err != nil {
		log.Fatalf("paramgen failed to parse parameters: %v\n", err)
	}

	// convert the parameter map to a string
	str := paramsToString(params)

	processTemplate(str, args)
}

const (
	outputDirName = "/paramgen"
	paramGenTmpl  = `// Code generated by ParamGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-sdk/cmd/paramgen

// Package paramgen is a generated ParamGen package.
package paramgen

import sdk "github.com/conduitio/conduit-connector-sdk"

func getParameters() map[string]sdk.Parameter {
  return {{.}}
}
`
)

// processTemplate creates and executes the paramgen template, then writes the output file under the directory ./paramgen.
func processTemplate(str string, args Args) {
	// create the go template
	t := template.Must(template.New("").Parse(paramGenTmpl))

	var processed bytes.Buffer
	// execute the template
	err := t.Execute(&processed, str)
	if err != nil {
		log.Fatalf("error executing template: %v\n", err)
	}

	// format the output as Go code in the “gofmt” style
	formatted, err := format.Source(processed.Bytes())
	if err != nil {
		log.Fatalf("Could not format processed template: %v\n", err)
	}

	// create output directory if it does not exist
	outputDir := strings.TrimSuffix(args.path, "/") + outputDirName
	_, err = os.Stat(outputDir)
	if os.IsNotExist(err) {
		err = os.Mkdir(outputDir, os.ModePerm)
		if err != nil {
			log.Fatalf("could not create directory: %v\n", err)
		}
	}

	// create the output file and write data
	outputPath := outputDir + "/" + args.output
	f, err := os.Create(outputPath)
	if err != nil {
		log.Fatalf("could not create file: %v\n", err)
	}
	w := bufio.NewWriter(f)
	_, err = w.WriteString(string(formatted))
	if err != nil {
		log.Fatalf("error writing to a file: %v\n", err)
	}
	w.Flush()
	log.Printf("output file created: %s\n", outputPath)
}

func paramsToString(params map[string]sdk.Parameter) string {
	str := fmt.Sprintf("%#v\n", params)
	str = strings.ReplaceAll(str, ",", ",\n")
	str = strings.ReplaceAll(str, "{", "{\n")
	str = strings.ReplaceAll(str, "}}", "},\n}")
	return str
}

func parseArgs() Args {
	flags := flag.NewFlagSet(os.Args[0], flag.ExitOnError)
	var (
		output     = flags.String("output", "conduit-config.go", "name of the output file")
		structName = flags.String("struct", "Config", "the configuration struct name")
		path       = flags.String("path", ".", "directory path to the package that has the configuration struct")
	)

	// flags is set up to exit on error, we can safely ignore the error
	_ = flags.Parse(os.Args[1:])

	var args Args
	args.output = stringPtrToVal(output)
	args.structName = stringPtrToVal(structName)
	args.path = stringPtrToVal(path)

	// add .go suffix if it is not in the name
	if !strings.HasSuffix(args.output, ".go") {
		args.output += ".go"
	}

	return args
}

func stringPtrToVal(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}
